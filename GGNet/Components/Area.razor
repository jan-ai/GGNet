@using System.Globalization

@typeparam T
@typeparam TX
@typeparam TY

@using GGNet.Shapes

@for (var g = 0; g < Data.Geoms.Count; g++)
{
    var geom = Data.Geoms[g];

    for (var i = 0; i < geom.Layer.Count; i++)
    {
        var shape = geom.Layer[i];

        if (shape is Shapes.Line l)
        {
            <line x1=@Coord.CoordX(l.X1).ToString(CultureInfo.InvariantCulture)
                  y1=@Coord.CoordY(l.Y1).ToString(CultureInfo.InvariantCulture)
                  x2=@Coord.CoordX(l.X2).ToString(CultureInfo.InvariantCulture)
                  y2=@Coord.CoordY(l.Y2).ToString(CultureInfo.InvariantCulture)
                  class=@l.Css()
                  stroke-width=@l.Aesthetic.Width.ToString(CultureInfo.InvariantCulture)
                  stroke=@l.Aesthetic.Fill
                  stroke-opacity=@l.Aesthetic.Alpha.ToString(CultureInfo.InvariantCulture)
                  stroke-dasharray=@l.Aesthetic.LineType.DashArray()
                  clip-path="url(#@(Clip))"
                  @onclick=@(async e => await l.OnClickHandler(e))
                  @onmouseover=@(async e => await l.OnMouseOverHandler(e))
                  @onmouseout=@(async e => await l.OnMouseOutHandler(e)) />
        }
        else if (shape is Shapes.Rectangle r)
        {
            var x = Coord.CoordX(r.X);
            var y = Coord.CoordY(r.Y + r.Height);
            var width = Coord.CoordX(r.X + r.Width) - x;
            var height = Coord.CoordY(r.Y) - y;

            <rect x=@x.ToString(CultureInfo.InvariantCulture)
                  y=@y.ToString(CultureInfo.InvariantCulture)
                  width=@width.ToString(CultureInfo.InvariantCulture)
                  height=@height.ToString(CultureInfo.InvariantCulture)
                  class=@r.Css()
                  fill=@r.Aesthetic.Fill
                  fill-opacity=@r.Aesthetic.Alpha.ToString(CultureInfo.InvariantCulture)
                  clip-path="url(#@(Clip))"
                  @onclick=@(async e => await r.OnClickHandler(e))
                  @onmouseover=@(async e => await r.OnMouseOverHandler(e))
                  @onmouseout=@(async e => await r.OnMouseOutHandler(e)) />
        }
        else if (shape is Shapes.Circle c)
        {
            <g style="transform: translate(@Coord.CoordX(c.X).ToString(CultureInfo.InvariantCulture)px, @Coord.CoordY(c.Y).ToString(CultureInfo.InvariantCulture)px)">
                <circle cx="0"
                        cy="0"
                        r=@c.Aesthetic.Radius.ToString(CultureInfo.InvariantCulture)
                        class=@c.Css()
                        stroke-width="0.71"
                        stroke=@c.Aesthetic.Fill
                        stroke-opacity=@c.Aesthetic.Alpha.ToString(CultureInfo.InvariantCulture)
                        fill=@c.Aesthetic.Fill
                        fill-opacity=@c.Aesthetic.Alpha.ToString(CultureInfo.InvariantCulture)
                        @onclick=@(async e => await c.OnClickHandler(e))
                        @onmouseover=@(async e => await c.OnMouseOverHandler(e))
                        @onmouseout=@(async e => await c.OnMouseOutHandler(e)) />
            </g>
        }
        else if (shape is Shapes.VStrip v)
        {
            var x = Coord.CoordX(v.X);
            var width = Coord.CoordY(v.X + v.Width) - x;

            <rect x=@x.ToString(CultureInfo.InvariantCulture)
                  y=@Zone.Y.ToString(CultureInfo.InvariantCulture)
                  width=@width.ToString(CultureInfo.InvariantCulture)
                  height=@Zone.Height.ToString(CultureInfo.InvariantCulture)
                  fill="transparent"
                  clip-path="url(#@(Clip))"
                  @onclick=@(async e => await v.OnClickHandler(e))
                  @onmouseover=@(async e => await v.OnMouseOverHandler(e))
                  @onmouseout=@(async e => await v.OnMouseOutHandler(e)) />
        }
        else if (shape is Shapes.Path p)
        {
            if (p.Points.Count > 0)
            {
                <path d=@Path(p)
                      fill="none"
                      stroke-width=@p.Aesthetic.Width.ToString(CultureInfo.InvariantCulture)
                      stroke=@p.Aesthetic.Fill
                      stroke-opacity=@p.Aesthetic.Alpha.ToString(CultureInfo.InvariantCulture)
                      stroke-dasharray=@p.Aesthetic.LineType.DashArray()
                      clip-path="url(#@(Clip))" />
            }
        }
        else if (shape is Shapes.Area a)
        {
            if (a.Points.Count > 0)
            {
                <path d=@Path(a)
                      fill=@a.Aesthetic.Fill
                      fill-opacity=@a.Aesthetic.Alpha.ToString(CultureInfo.InvariantCulture)
                      clip-path="url(#@(Clip))" />
            }
        }
        else if (shape is Shapes.Polygon poly)
        {
            <path d=@Path(poly.Path)
                  class=@poly.Css()
                  fill=@poly.Aesthetic.Fill
                  fill-opacity=@poly.Aesthetic.Alpha.ToString(CultureInfo.InvariantCulture)
                  stroke=@poly.Aesthetic.Color
                  stroke-width=@poly.Aesthetic.Width.ToString(CultureInfo.InvariantCulture)
                  clip-path="url(#@(Clip))"
                  @onclick=@(async e => await poly.OnClickHandler(e))
                  @onmouseover=@(async e => await poly.OnMouseOverHandler(e))
                  @onmouseout=@(async e => await poly.OnMouseOutHandler(e)) />
        }
        else if (shape is Shapes.MultiPolygon multi)
        {
            <path d=@Path(multi.Polygons)
                  class=@multi.Css()
                  fill=@multi.Aesthetic.Fill
                  fill-opacity=@multi.Aesthetic.Alpha.ToString(CultureInfo.InvariantCulture)
                  stroke=@multi.Aesthetic.Color
                  stroke-width=@multi.Aesthetic.Width.ToString(CultureInfo.InvariantCulture)
                  clip-path="url(#@(Clip))"
                  @onclick=@(async e => await multi.OnClickHandler(e))
                  @onmouseover=@(async e => await multi.OnMouseOverHandler(e))
                  @onmouseout=@(async e => await multi.OnMouseOutHandler(e)) />
        }
        else if (shape is Shapes.Text text)
        {
            <g style="pointer-events: none;" clip-path="url(#@(Clip))">
                <text style="fill: @text.Aesthetic.Color; text-anchor: @text.Aesthetic.Anchor; font-size: @text.Aesthetic.Size; font-weigth: @text.Aesthetic.Weight; font-style: @text.Aesthetic.Style; transform: translate(@Coord.CoordX(text.X).ToString(CultureInfo.InvariantCulture)px, @Coord.CoordY(text.Y).ToString(CultureInfo.InvariantCulture)px) rotate(@text.Aesthetic.Angle.ToString(CultureInfo.InvariantCulture)deg);">
                    @text.Value
                </text>
            </g>
        }
        else if (shape is Shapes.VLine vline)
        {
            var x = Coord.CoordX(vline.X);

            <line x1=@x.ToString(CultureInfo.InvariantCulture)
                  y1=@Zone.Y.ToString(CultureInfo.InvariantCulture)
                  x2=@x.ToString(CultureInfo.InvariantCulture)
                  y2=@((Zone.Y + Zone.Height).ToString(CultureInfo.InvariantCulture))
                  stroke-width=@vline.Line.Width.ToString(CultureInfo.InvariantCulture)
                  stroke=@vline.Line.Fill
                  stroke-opacity=@vline.Line.Alpha.ToString(CultureInfo.InvariantCulture)
                  stroke-dasharray=@vline.Line.LineType.DashArray()
                  clip-path="url(#@(Clip))" />

            if (!string.IsNullOrEmpty(vline.Label))
            {
                var offset = 0.025 * Zone.Height;

                var y = 0.0;
                var angle = 0.0;

                if (vline.Text.Anchor == Anchor.end)
                {
                    x += 3;
                    y = Zone.Y + offset;
                    angle = 90;
                }
                else
                {
                    x -= 3;
                    y = Zone.Y + Zone.Height - offset;
                    angle = -90;
                }

                <g style="pointer-events: none;" clip-path="url(#@(Clip))">
                    <text style="fill: @vline.Text.Color; fill-opacity: @vline.Text.Alpha.ToString(CultureInfo.InvariantCulture); text-anchor: @Anchor.start; font-size: @vline.Text.Size; font-weigth: @vline.Text.Weight; font-style: @vline.Text.Style; transform: translate(@x.ToString(CultureInfo.InvariantCulture)px, @y.ToString(CultureInfo.InvariantCulture)px) rotate(@angle.ToString(CultureInfo.InvariantCulture)deg);">
                        @vline.Label
                    </text>
                </g>
            }
        }
        else if (shape is Shapes.HLine hline)
        {
            var y = Coord.CoordY(hline.Y);

            <line x1=@Zone.X.ToString(CultureInfo.InvariantCulture)
                  y1=@y.ToString(CultureInfo.InvariantCulture)
                  x2=@((Zone.X + Zone.Width).ToString (CultureInfo.InvariantCulture))
                  y2=@y.ToString(CultureInfo.InvariantCulture)
                  stroke-width=@hline.Line.Width.ToString(CultureInfo.InvariantCulture)
                  stroke=@hline.Line.Fill
                  stroke-opacity=@hline.Line.Alpha.ToString(CultureInfo.InvariantCulture)
                  stroke-dasharray=@hline.Line.LineType.DashArray()
                  clip-path="url(#@(Clip))" />

            if (!string.IsNullOrEmpty(hline.Label))
            {
                var offset = 0.025 * Zone.Width;

                var x = 0.0;

                if (hline.Text.Anchor == Anchor.end)
                {
                    x = Zone.X + Zone.Width - offset;
                }
                else
                {
                    x = Zone.X + offset;
                }

                y -= 3;

                <g style="pointer-events: none;" clip-path="url(#@(Clip))">
                    <text style="fill: @hline.Text.Color; fill-opacity: @hline.Text.Alpha.ToString(CultureInfo.InvariantCulture); text-anchor: @hline.Text.Anchor; font-size: @hline.Text.Size; font-weigth: @hline.Text.Weight; font-style: @hline.Text.Style; transform: translate(@x.ToString(CultureInfo.InvariantCulture)px, @y.ToString(CultureInfo.InvariantCulture)px);">
                        @hline.Label
                    </text>
                </g>
            }
        }
        else if (shape is Shapes.ABLine abline)
        {
            var ymin = Coord.XRange.min;
            var ymax = Coord.XRange.max;
            if (abline.Transformation.x)
            {
                ymin = Coord.XTransformation.Inverse(ymin);
                ymax = Coord.XTransformation.Inverse(ymax);
            }

            ymin = abline.A * ymin + abline.B;
            ymax = abline.A * ymax + abline.B;

            if (abline.Transformation.y)
            {
                ymin = Coord.YTransformation.Apply(ymin);
                ymax = Coord.YTransformation.Apply(ymax);
            }

            var y1 = Coord.CoordY(ymin);
            var y2 = Coord.CoordY(ymax);

            <line x1=@Zone.X.ToString(CultureInfo.InvariantCulture)
                  y1=@y1.ToString(CultureInfo.InvariantCulture)
                  x2=@((Zone.X + Zone.Width).ToString(CultureInfo.InvariantCulture))
                  y2=@y2.ToString(CultureInfo.InvariantCulture)
                  stroke-width=@abline.Line.Width.ToString(CultureInfo.InvariantCulture)
                  stroke=@abline.Line.Fill
                  stroke-opacity=@abline.Line.Alpha.ToString(CultureInfo.InvariantCulture)
                  stroke-dasharray=@abline.Line.LineType.DashArray()
                  clip-path="url(#@(Clip))" />

            if (!string.IsNullOrEmpty(abline.Label))
            {
                var x = 0.0;
                var y = 0.0;
                var offset = 0.05 * Zone.Width;

                var tan = (y1 - y2) / Zone.Width;
                var angle = Math.Atan(tan);

                if (abline.Text.Anchor == Anchor.end)
                {
                    x = Zone.X + Zone.Width;
                    y = y2;

                    if (angle >= 0)
                    {
                        if (ymax > Coord.YRange.max)
                        {
                            x = Coord.YRange.max;

                            if (abline.Transformation.y)
                            {
                                x = Coord.YTransformation.Inverse(x);
                            }

                            x = (x - abline.B) / abline.A;

                            if (abline.Transformation.x)
                            {
                                x = Coord.XTransformation.Apply(x);

                            }

                            x = Coord.CoordX(x);

                            y = Zone.Y;
                        }
                    }
                    else
                    {
                        if (ymax < Coord.YRange.min)
                        {
                            x = Coord.YRange.min;

                            if (abline.Transformation.y)
                            {
                                x = Coord.YTransformation.Inverse(x);
                            }

                            x = (x - abline.B) / abline.A;

                            if (abline.Transformation.x)
                            {
                                x = Coord.XTransformation.Apply(x);

                            }

                            x = Coord.CoordX(x);

                            y = Zone.Y + Zone.Height;
                        }
                    }

                    x -= offset;
                    y += offset * tan - 3;
                }
                else
                {
                    x = Zone.X;
                    y = y1;

                    if (angle >= 0)
                    {
                        if (ymin < Coord.YRange.min)
                        {
                            x = Coord.YRange.min;

                            if (abline.Transformation.y)
                            {
                                x = Coord.YTransformation.Inverse(x);
                            }

                            x = (x - abline.B) / abline.A;

                            if (abline.Transformation.x)
                            {
                                x = Coord.XTransformation.Apply(x);

                            }

                            x = Coord.CoordX(x);

                            y = Zone.Y + Zone.Height;
                        }
                    }
                    else
                    {
                        if (ymin < Coord.YRange.max)
                        {
                            x = Coord.YRange.max;

                            if (abline.Transformation.y)
                            {
                                x = Coord.YTransformation.Inverse(x);
                            }

                            x = (x - abline.B) / abline.A;

                            if (abline.Transformation.x)
                            {
                                x = Coord.XTransformation.Apply(x);

                            }

                            x = Coord.CoordX(x);

                            y = Zone.Y;
                        }
                    }

                    x += offset;
                    y -= offset * tan + 3;

                }

                <g style="pointer-events: none;" clip-path="url(#@(Clip))">
                    <text style="fill: @abline.Text.Color; fill-opacity: @abline.Text.Alpha.ToString(CultureInfo.InvariantCulture); text-anchor: @abline.Text.Anchor; font-size: @abline.Text.Size; font-weigth: @abline.Text.Weight; font-style: @abline.Text.Style; transform: translate(@x.ToString(CultureInfo.InvariantCulture)px, @y.ToString(CultureInfo.InvariantCulture)px) rotate(@((-angle).ToString(CultureInfo.InvariantCulture))rad);">
                        @abline.Label
                    </text>
                </g>
            }
        }
    }
}
